var StandardCharts;(()=>{"use strict";var t={d:(i,e)=>{for(var n in e)t.o(e,n)&&!t.o(i,n)&&Object.defineProperty(i,n,{enumerable:!0,get:e[n]})},o:(t,i)=>Object.prototype.hasOwnProperty.call(t,i)},i={};(()=>{function e(t={}){const{chart:i,height:e="100%",width:n="100%"}=t;return`<svg xmlns="http://www.w3.org/2000/svg" width="${n}" height="${e}" version="1.2" >\n    <defs>\n        <pattern id="stripes" patternUnits="userSpaceOnUse" width="4" height="4" fill="red" patternTransform="rotate(45)">\n            <line x1="0" y="0" x2="0" y2="4" stroke="rgb(65,65,64)" stroke-width="4" />\n        </pattern>\n        <style>@font-face {\n    font-family: 'Svg';\n    src: url('data:font/woff2;charset=utf-8;base64,') format('woff2');\n    font-weight: normal;\n    font-style: normal;\n}</style>\n    </defs>\n    <g >\n    ${i}\n    </g>\n    </svg>`}function n(t={}){const{x:i=0,y:e=0,width:n=10,height:r=10,fill:s="none",stroke:a="none",strokeWidth:h=0,opacity:l=1}=t,o=`\n    fill="${s}" \n    opacity="${l}"\n    `;return"none"!==a?`<rect \n    ${o}\n    x="${i+h/2}" \n    y="${e+h/2}" \n    width="${n-h}" \n    height="${r-h}" \n    stroke="${a}" \n    stroke-width="${h}"\n    />`:`<rect \n    ${o}\n    x="${i}" \n    y="${e}" \n    width="${n}" \n    height="${r}" \n    />`}t.d(i,{default:()=>x});class r{static totalHeight=18;static actualHeight=14.67;static bottomPadding=3.33;static labelHeight=r.totalHeight+1;static widthOfWord(t){t=t.toString();let i=0;for(let e=0;e<t.length;e++)i+=s[t.charCodeAt(e)-32]/1e3;return i}static centerWordInRect(t,i){return{x:i.x+(i.width-r.widthOfWord(t))/2,y:i.y+(i.height+r.totalHeight)/2-r.bottomPadding}}}const s=new Uint16Array([3970,4130,5130,9860,9e3,11730,9960,2800,5490,5570,6900,9080,3140,4420,4220,6600,8990,8990,8990,8990,8990,8990,8990,8990,8990,8990,3880,3390,8140,8780,8360,7560,14370,10440,9960,10420,10490,9100,8840,10900,11400,4360,8820,10040,8610,13970,11400,11e3,10090,10990,9850,9490,9550,10370,10180,14190,10030,9610,9580,4240,6580,4250,6690,7220,4950,8710,8970,8380,9030,8480,5560,8980,8820,3880,3820,8120,3880,14020,8840,9130,8980,9100,5420,8260,5230,8820,7750,12020,7940,7570,7930,5420,3900,5420,10900]);class a{static PY="PY";static AC="AC";static FC="FC";static PL="PL"}class h{static primaryValues(t){const{primary:i}=h.allValues(t);let e=0,n=0;return i.forEach((t=>{const i=t.value;i>0&&(e+=i),i<0&&(n+=i)})),[e,n]}static allValues(t){const{PY:i,AC:e,FC:n,PL:r}=t,s=[],h=[],l=[],o=i=>{const e=t[i];return(Array.isArray(e)?e:[e]).map(((t,e)=>({value:t,scenario:i,stackIndex:e})))};return e&&h.push(...o(a.AC)),n&&h.push(...o(a.FC)),r&&(0===h.length?h.push(...o(a.PL)):l.push(...o(a.PL))),i&&(0===h.length?h.push(...o(a.PY)):s.push(...o(a.PY))),{left:s,right:l,primary:h}}}class l{static chartPadding=10;static DefaultColumn(t,i){let e=[0,1],n=[0,1],s=0,a=0;for(let i=0;i<t.length;i++){const r=t[i],{left:l,primary:o,right:c}=h.allValues(r);[c].forEach((t=>{let i=0,e=0;t.forEach((t=>{t.value>0&&(i+=t.value),t.value<0&&(e+=t.value)})),i>s&&(s=i),e<a&&(a=e)}));let d=0,u=0;o.forEach((t=>{const i=t.value;i>0&&(d+=i),i<0&&(u+=i)})),d>e[0]&&(e=[d,1]),u<n[0]&&(n=0===d?[u,1]:[u,2])}let o=i-2*l.chartPadding,c=0,d=0,u=0;s>e[0]?(c=Math.max(0,e[1]*r.labelHeight-s),o-=c,d=s):(c=e[1]*r.labelHeight,o-=c,d=e[0]),a<n[0]?(o-=Math.max(0,n[1]*r.labelHeight-Math.abs(a)),u=a):(o-=n[1]*r.labelHeight,u=n[0]);const g=o/(d+Math.abs(u));return{scale:g,axisOrigin:{x:l.chartPadding,y:l.chartPadding+c+d*g}}}static StackColum(t,i){return l.DefaultColumn(t,i)}}class o{static columnPadding=1;static sideColumnWidth=6;static minInnerColumnWidth=22;static maxInnerColumnWidth=66;constructor(t,i,e,n){this.x=t,this.y=i,this.dataPointPositions=[],this.scale=n,this.leftColumnWidth=0;let s=o.minInnerColumnWidth+2*o.columnPadding;this.rightColumnWidth=0;for(let t=0;t<e.length;t++){const{key:i}=e[t],n=t=>{o.outerFit(t)&&r.widthOfWord(t)>s&&(s=r.widthOfWord(t))};n(i),n(h.primaryValues(e[t])[0]),n(h.primaryValues(e[t])[1]);const{left:a,right:l}=h.allValues(e[t]);a.length>0&&(this.leftColumnWidth=o.sideColumnWidth),l.length>0&&(this.rightColumnWidth=o.sideColumnWidth)}this.columnWidth=s+2*o.columnPadding,this.columnMargin=s/6;let a=t;for(let t=0;t<e.length;t++)a+=this.columnMargin+this.leftColumnWidth+this.columnWidth/2,this.dataPointPositions.push(a),a+=this.columnWidth/2+this.rightColumnWidth+this.columnMargin;this.width=a-t,this.chartWidth=a+l.chartPadding}static innerFit(t,i){return t=t.toString(),o.maxInnerColumnWidth>=r.widthOfWord(t)+2&&i-2*o.columnPadding>=r.totalHeight}static outerFit(t){return t=t.toString(),o.maxInnerColumnWidth+2*o.columnPadding>=r.widthOfWord(t)+2}render(){return n({x:this.x,y:this.y-1,width:this.width,height:2,fill:"rgb(0,0,0)"})}}function c(t={}){const{word:i="",x:e=0,y:s=0,bold:a=!1,color:h="rgb(0,0,0)",background:l}=t;return`${l?n({x:e-1,y:s-r.actualHeight,height:r.totalHeight,width:r.widthOfWord(i)+2,fill:l,opacity:.5}):""}\n  <text \n  x="${e}" \n  y="${s}" \n  font-family="Svg" \n  font-weight="${a?"700":"400"}" \n  font-size="14x" \n  letter-spacing="0" \n  fill="${h}">\n  ${i}\n  </text>`}class d{static LEFT="LEFT";static RIGHT="RIGHT";static TOP="TOP";static BOTTOM="BOTTOM";static oppositeDirection(t){switch(t){case d.LEFT:return d.RIGHT;case d.RIGHT:return d.LEFT;case d.TOP:return d.BOTTOM;case d.BOTTOM:return d.TOP}}}class u{constructor(t,i,e,n,r){this.x=t,this.y=i,this.width=e,this.height=n,this.direction=r}draw(){const t={};return this.direction===d.LEFT||this.direction===d.RIGHT?(t.x=this.x-(this.direction===d.LEFT?this.height:0),t.y=this.y-this.width/2,t.width=this.height,t.height=this.width):(t.x=this.x-this.width/2,t.y=this.y-(this.direction===d.TOP?this.height:0),t.width=this.width,t.height=this.height),t}centerWord(t){return r.centerWordInRect(t,this.draw())}topPosition(){switch(this.direction){case d.LEFT:return{x:this.x-this.height,y:this.y};case d.RIGHT:return{x:this.x+this.height,y:this.y};case d.TOP:return{x:this.x,y:this.y-this.height};case d.BOTTOM:return{x:this.x,y:this.y+this.height}}}topWord(t){const i=new u(this.x,this.topPosition().y,this.width,this.direction===d.LEFT||this.direction===d.RIGHT?r.widthOfWord(t)+4:r.totalHeight+1,this.direction);return r.centerWordInRect(t,i.draw())}bottomWord(t){const i=new u(this.x,this.y,this.width,this.direction===d.LEFT||this.direction===d.RIGHT?r.widthOfWord(t)+4:r.totalHeight+3,d.oppositeDirection(this.direction));return r.centerWordInRect(t,i.draw())}}class g{static renderAxialRectByScenario(t){const{value:i,unstackValue:e,scenario:r,axialRect:s,stackIndex:h=0,stack:l}=t,d=["rgb(230,230,230)","rgb(130,130,130)","rgb(200,200,200)","rgb(100,100,100)","rgb(170,170,170)","rgb(70,70,70)"],u=l&&o.innerFit(e,s.draw().height)?c({...s.centerWord(e),word:e,color:(t=>`rgb(${t},${t},${t})`)([0,255,0,255,0,255][h-1])}):"";if(0===h)switch(r){case a.PY:return[n({...s.draw(),fill:"rgb(157,157,156)"}),l?c({...s.centerWord(e),word:e}):""];case a.AC:return[n({...s.draw(),fill:"rgb(73,73,72)"}),""];case a.FC:return[n({...s.draw(),fill:"rgb(255,255,255)"})+n({...s.draw(),fill:"url(%23stripes)",stroke:"rgb(65,65,64)",strokeWidth:1.5}),""];case a.PL:return[n({...s.draw(),fill:"rgb(255,255,255)",stroke:"rgb(73,73,72)",strokeWidth:1.5}),""]}if(r===a.PL){const t=s.draw();return[n({...t,y:t.y-(i<0?1.5:0),height:t.height+1.5,fill:d[h-1],stroke:r===a.PL?"rgb(73,73,72)":null,strokeWidth:r===a.PL?1.5:null}),""]}return[n({...s.draw(),fill:d[h-1]}),u]}}class A{constructor(t){const{x:i,y:e,dataPoint:n,columnWidth:s,scale:a,stack:l}=t,{left:d,primary:u,right:A}=h.allValues(n);this.x=i,this.y=e,this.dataPoint=n,this.columnWidth=s,this.scale=a;const[f,y]=this.buildColumns(d,-o.sideColumnWidth),[m,W]=this.buildColumns(A,o.sideColumnWidth),[x,C]=this.buildColumns(u),[p,T]=[...f,...y,...m,...W,...x,...C].map((t=>g.renderAxialRectByScenario({...t,stack:l}))).reduce(((t,i)=>[t[0].concat(i[0]),t[1].concat(i[1])]),[[],[]]),w=x[x.length-1],k=x[0],O=C[C.length-1],I=C[0],[v,S]=h.primaryValues(n);if(w){const t=w.axialRect.topWord(v);if(T.push(o.outerFit(v)?c({word:v,x:t.x,y:t.y,background:"white"}):""),!O){const t=k.axialRect.bottomWord(n.key);T.push(o.outerFit(n.key)?c({word:n.key,x:t.x,y:t.y,background:"white"}):"")}}if(O){const t=O.axialRect.topWord(S);T.push(o.outerFit(S)?c({word:S,x:t.x,y:t.y,background:"white"}):"");const i=w?O.axialRect.topWord(n.key):I.axialRect.bottomWord(n.key);T.push(o.outerFit(n.key)?c({word:n.key,x:i.x,y:i.y+(w?r.labelHeight:0),background:"white"}):"")}this.render=p+T}buildColumn(t,i,e){return new u(this.x+e,i,this.columnWidth,Math.abs(t*this.scale),t>0?d.TOP:d.BOTTOM)}buildColumns(t,i=0){const e=[],n=[];for(let r=0;r<t.length;r++){const{value:s,scenario:a,stackIndex:h}=t[r],l=s>=0?e[e.length-1]:n[n.length-1];(s>=0?e:n).push({value:s+(l?l.value:0),unstackValue:s,scenario:a,axialRect:this.buildColumn(s,l?l.axialRect.topPosition().y:this.y,i),stackIndex:h})}return[e,n]}}function f(t,i){const{data:n,height:r=100}=t,{scale:s,axisOrigin:a}=i,h=new o(a.x,a.y,n);return e({chart:n.map(((t,i)=>new A({x:h.dataPointPositions[i],y:h.y,dataPoint:t,columnWidth:h.columnWidth,scale:s}).render))+h.render(),height:r,width:h.chartWidth})}function y(t,i){const{data:n,height:r=100}=t,{scale:s,axisOrigin:a}=i,h=new o(a.x,a.y,n);return e({chart:n.map(((t,i)=>new A({x:h.dataPointPositions[i],y:h.y,dataPoint:t,columnWidth:h.columnWidth,scale:s,stack:!0}).render))+h.render(),height:r,width:h.chartWidth})}class m{static COLUMN="COLUMN"}class W{static DEFAULT="DEFAULT";static STACK="STACK"}function x(t){Array.isArray(t)||(t=[t]);let i=[],e=Number.MAX_VALUE;for(let n=0;n<t.length;n++){const{chartType:r,chartVariant:s,data:a,height:h}=t[n];r===m.COLUMN&&(s===W.STACK?i.push(l.StackColum(a,h)):i.push(l.DefaultColumn(a,h))),i[n].scale<e&&(e=i[n].scale)}let n=[];for(let r=0;r<t.length;r++){const s=t[r],{chartType:a,chartVariant:h}=s,l=i[r];a===m.COLUMN&&(h===W.STACK?n.push(y(s,{scale:e,axisOrigin:l.axisOrigin})):n.push(f(s,{scale:e,axisOrigin:l.axisOrigin})))}return n}})(),StandardCharts=i.default})();