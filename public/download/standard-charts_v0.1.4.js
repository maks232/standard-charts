var StandardCharts;(()=>{"use strict";var t={d:(i,a)=>{for(var e in a)t.o(a,e)&&!t.o(i,e)&&Object.defineProperty(i,e,{enumerable:!0,get:a[e]})},o:(t,i)=>Object.prototype.hasOwnProperty.call(t,i)},i={};(()=>{function a(t={}){const{chart:i,height:a="100%",width:e="100%",viewBoxWidth:s="100",viewBoxHeight:n="100"}=t;return`<svg xmlns="http://www.w3.org/2000/svg" \n  width="${e}" \n  height="${a}"\n  viewBox="0 0 ${s} ${n}"\n  version="1.2" >\n    <defs>\n        <pattern id="stripes" patternUnits="userSpaceOnUse" width="4" height="4" fill="red" patternTransform="rotate(45)">\n            <line x1="0" y="0" x2="0" y2="4" stroke="rgb(65,65,64)" stroke-width="4" />\n        </pattern>\n        <style>@font-face {\n    font-family: 'Svg';\n    src: url('data:font/woff2;charset=utf-8;base64,') format('woff2');\n    font-weight: normal;\n    font-style: normal;\n}</style>\n    </defs>\n    <g >\n    ${i}\n    </g>\n    </svg>`}t.d(i,{default:()=>w});class e{static COLUMN="COLUMN";static BAR="BAR"}class s{static DEFAULT="DEFAULT";static STACK="STACK"}class n{static totalHeight=16;static actualHeight=12.7;static bottomPadding=3.3;static labelHeight=n.totalHeight+1;static labelWidth=t=>n.widthOfWord(t)+2;static widthOfWord(t){t=t.toString();let i=0;for(let a=0;a<t.length;a++)i+=h[t.charCodeAt(a)-32]/1e3;return i}static centerWordInRect(t,i){return{x:i.x+(i.width-n.widthOfWord(t))/2,y:i.y+(i.height+n.totalHeight)/2-n.bottomPadding}}}const h=new Uint16Array([3510,3640,4510,8660,7900,10290,8740,2480,4820,4900,6060,7980,2780,3900,3720,5810,7890,7890,7890,7890,7890,7890,7890,7890,7890,7890,3420,3e3,7150,7710,7350,6650,12600,9170,8750,9150,9220,7990,7780,9570,10010,3840,7760,8810,7560,12250,10010,9660,8860,9660,8650,8330,8390,9110,8940,12450,8810,8440,8410,3750,5770,3750,5880,6350,4360,7650,7890,7360,7930,7450,4890,7890,7740,3430,3370,7130,3430,12300,7760,8020,7890,7990,4770,7250,4610,7750,6810,10550,6970,6650,6970,4770,3440,4770,9550]);function r(t={}){const{x:i=0,y:a=0,width:e=10,height:s=10,fill:n="none",stroke:h="none",strokeWidth:r=0,opacity:l=1}=t,c=`\n    fill="${n}" \n    opacity="${l}"\n    `;return"none"!==h?`<rect \n    ${c}\n    x="${i+r/2}" \n    y="${a+r/2}" \n    width="${e-r}" \n    height="${s-r}" \n    stroke="${h}" \n    stroke-width="${r}"\n    />`:`<rect \n    ${c}\n    x="${i}" \n    y="${a}" \n    width="${e}" \n    height="${s}" \n    />`}function l(t={}){const{word:i="",x:a=0,y:e=0,bold:s=!1,color:h="rgb(0,0,0)",background:l,backgroundOpacity:c=.5}=t;return`${l?r({x:a-1,y:e-n.actualHeight,height:n.totalHeight,width:n.widthOfWord(i)+2,fill:l,opacity:c}):""}\n  <text \n  x="${a}" \n  y="${e}" \n  font-family="Svg" \n  font-weight="${s?"700":"400"}" \n  font-size="14px" \n  letter-spacing="0" \n  fill="${h}">\n  ${i}\n  </text>`}class c{static LEFT="LEFT";static RIGHT="RIGHT";static TOP="TOP";static BOTTOM="BOTTOM";static oppositeDirection(t){switch(t){case c.LEFT:return c.RIGHT;case c.RIGHT:return c.LEFT;case c.TOP:return c.BOTTOM;case c.BOTTOM:return c.TOP}}}class o{constructor(t,i,a,e,s){this.x=t,this.y=i,this.width=a,this.height=e,this.direction=s}draw(){const t={};return this.direction===c.LEFT||this.direction===c.RIGHT?(t.x=this.x-(this.direction===c.LEFT?this.height:0),t.y=this.y-this.width/2,t.width=this.height,t.height=this.width):(t.x=this.x-this.width/2,t.y=this.y-(this.direction===c.TOP?this.height:0),t.width=this.width,t.height=this.height),t}centerWord(t){return n.centerWordInRect(t,this.draw())}topPosition(){switch(this.direction){case c.LEFT:return{x:this.x-this.height,y:this.y};case c.RIGHT:return{x:this.x+this.height,y:this.y};case c.TOP:return{x:this.x,y:this.y-this.height};case c.BOTTOM:return{x:this.x,y:this.y+this.height}}}sidePosition(t){switch(this.direction){case c.LEFT:return{x:this.x-this.height/2,y:this.y+t*(this.width/2)};case c.RIGHT:return{x:this.x+this.height/2,y:this.y+t*(this.width/2)};case c.TOP:return{x:this.x+t*(this.width/2),y:this.y-this.height/2};case c.BOTTOM:return{x:this.x+t*(this.width/2),y:this.y+this.height/2}}}leftPosition(){return this.sidePosition(-1)}rightPosition(){return this.sidePosition(1)}topWord(t){const i=new o(this.topPosition().x,this.topPosition().y,this.width,this.direction===c.LEFT||this.direction===c.RIGHT?n.widthOfWord(t)+4:n.totalHeight+1,this.direction);return n.centerWordInRect(t,i.draw())}bottomWord(t){const i=new o(this.x,this.y,this.width,this.direction===c.LEFT||this.direction===c.RIGHT?n.widthOfWord(t)+4:n.totalHeight+3,c.oppositeDirection(this.direction));return n.centerWordInRect(t,i.draw())}}class d{static PY="PY";static AC="AC";static FC="FC";static PL="PL"}class u{static stackValues(t){let i=0,a=0;for(let e=0;e<t.length;e++){const s=t[e].value;s>0&&(i+=s),s<0&&(a+=s)}return i=Math.round(1e3*i)/1e3,a=Math.round(1e3*a)/1e3,[i,a]}static allValues(t){const{PY:i,AC:a,FC:e,PL:s}=t,n=[],h=[],r=[],l=i=>{const a=t[i];return(Array.isArray(a)?a:[a]).map(((t,a)=>({value:t,scenario:i,stackIndex:a})))};return a&&h.push(...l(d.AC)),e&&h.push(...l(d.FC)),s&&(0===h.length?h.push(...l(d.PL)):r.push(...l(d.PL))),i&&(0===h.length?h.push(...l(d.PY)):n.push(...l(d.PY))),{left:n,right:r,primary:h}}}class g{static chartPadding=10;static barLabelGap=10;static DefaultColumn(t,i){const{chartType:a,data:s}=t;let h={value:0,labels:[""]},r={value:0,labels:[s.map((t=>t.key)).sort(((t,i)=>n.labelWidth(i)-n.labelWidth(t)))[0]]},l=0,c=0;for(let t=0;t<s.length;t++){const i=s[t],{left:a,primary:e,right:n}=u.allValues(i),[o,d]=u.stackValues(a),[g,y]=u.stackValues(n);[o,g].forEach((t=>{t>l&&(l=t)})),[d,y].forEach((t=>{t<c&&(c=t)}));const[x,f]=u.stackValues(e);x>h.value&&(h={value:x,labels:[x]}),f<r.value&&(r={value:f,labels:0===x?[f]:[i.key,f]})}const o=i-2*g.chartPadding,d=Math.max(h.value,l),y=Math.min(r.value,c),x=o/(d+Math.abs(y)),f=t=>a===e.COLUMN?t.length*n.labelHeight:t.reduce(((t,i,a)=>t+n.labelWidth(i)+(a>0?g.barLabelGap:0)),0),W=(t,i)=>Math.abs(t.value)>=Math.abs(i)?f(t.labels):Math.max(0,Math.abs(t.value)*x+f(t.labels)-Math.abs(i)*x),m=W(h,l),A=W(r,c),p=((d+Math.abs(y))*x-(m+A))/(d+Math.abs(y));return{scale:p,heights:{actualHeight:d*p+Math.abs(y*p),maxPositiveValue:d,minNegativeValue:y},axisOrigin:{x:g.chartPadding+(a===e.BAR?A+Math.abs(y)*p:0),y:g.chartPadding+(a===e.COLUMN?m+d*p:0)}}}static StackColumn(t,i){return g.DefaultColumn(t,i)}static DefaultBar(t,i){return g.DefaultColumn(t,i)}}class y{static barPadding=1;static secondaryBarWidth=6;static primaryBarWidth=n.labelHeight+2+2*y.barPadding;static barMargin=y.primaryBarWidth/6;constructor(t,i,a,e,s){this.x=t,this.y=i,this.dataPointPositions=[],this.scale=e;let n=0,h=0;for(let t=0;t<a.length;t++){const{left:i,right:e}=u.allValues(a[t]);i.length>0&&(n=y.secondaryBarWidth),e.length>0&&(h=y.secondaryBarWidth)}let r=i;for(let t=0;t<a.length;t++)r+=y.barMargin+n+y.primaryBarWidth/2,this.dataPointPositions.push(r),r+=y.primaryBarWidth/2+h+y.barMargin;this.width=r-i,this.chartWidth=r+g.chartPadding}render(t=0){return r({x:this.x-1,y:this.y+t,width:2,height:this.width,fill:"rgb(0,0,0)"})}}class x{static columnPadding=1;static secondaryColumnWidth=8;static minPrimaryColumnWidth=18;static maxPrimaryColumnWidth=88;constructor(t,i,a,e,h){this.x=t,this.y=i,this.dataPointPositions=[],this.scale=e,this.leftColumnWidth=0;let r=x.minPrimaryColumnWidth+2*x.columnPadding;this.rightColumnWidth=0;for(let t=0;t<a.length;t++){const{key:i}=a[t],l=t=>{x.outerFit(t)&&n.widthOfWord(t)>r&&(r=n.widthOfWord(t))},c=t=>{x.innerFit(t,Math.abs(t)*e)&&n.widthOfWord(t)+2*x.columnPadding>r&&(r=n.labelWidth(t)+2*x.columnPadding)},{left:o,primary:d,right:g}=u.allValues(a[t]);l(i),l(u.stackValues(d)[0]),l(u.stackValues(d)[1]),h===s.STACK&&d.forEach((t=>c(t.value))),o.length>0&&(this.leftColumnWidth=x.secondaryColumnWidth),g.length>0&&(this.rightColumnWidth=x.secondaryColumnWidth)}this.columnWidth=r+2*x.columnPadding,this.columnMargin=r/6;let l=t;for(let t=0;t<a.length;t++)l+=this.columnMargin+this.leftColumnWidth+this.columnWidth/2,this.dataPointPositions.push(l),l+=this.columnWidth/2+this.rightColumnWidth+this.columnMargin;this.width=l-t,this.chartWidth=l+g.chartPadding}static innerFit(t,i){return t=t.toString(),x.maxPrimaryColumnWidth>=n.labelWidth(t)+2*x.columnPadding&&n.totalHeight<=i-2*x.columnPadding}static outerFit(t){return t=t.toString(),x.maxPrimaryColumnWidth+2*x.columnPadding>=n.widthOfWord(t)+2}render(t=0){return r({x:this.x+t,y:this.y-1,width:this.width,height:2,fill:"rgb(0,0,0)"})}}class f{static renderAxialRectByScenario(t){const{value:i,unstackValue:a,scenario:e,axialRect:s,stackIndex:n=0,stack:h,primary:c}=t,o=t=>`rgb(${t},${t},${t})`,u=o([230,130,200,100,170,70][(n+1)%6]),g=o([255,0][n%2]);let y,f,W,m;switch(e){case d.PY:y=0===n?o(157):u,f=g;break;case d.AC:y=0===n?o(73):u,f=g;break;case d.FC:y=0===n?o(255):u,f=0===n?o(0):g,W=0===n?"url(%23stripes)":u,m=o(65);break;case d.PL:y=0===n?o(255):u,f=0===n?o(0):g,m=o(73)}const A=s.draw(),p=h&&c&&x.innerFit(a,s.draw().height)?l({...s.centerWord(a),word:a,color:f,background:e===d.FC&&0===n?o(255):null,backgroundOpacity:.8}):"",T=W||m?r({...A,y:A.y-(i<0?1.5:0),height:A.height+(n>0?1.5:0),fill:W,stroke:m,strokeWidth:1.5}):"";return[r({...A,fill:y})+T,p]}}class W{constructor(t){const{x:i,y:a,dataPoint:s,rectWidth:h,scale:r,stack:c,chartType:o}=t,{left:d,primary:m,right:A}=u.allValues(s),[p,T]=W.buildMetaDataPoints({...t,metaDataPoints:d,axisOffset:o===e.COLUMN?-x.secondaryColumnWidth:-y.secondaryBarWidth,chartType:o}),[C,w]=W.buildMetaDataPoints({...t,metaDataPoints:A,axisOffset:o===e.COLUMN?x.secondaryColumnWidth:y.secondaryBarWidth,chartType:o}),[P,b]=W.buildMetaDataPoints({...t,metaDataPoints:m,primary:!0,chartType:o}),[k,O]=[...p,...T,...C,...w,...P,...b].map((t=>f.renderAxialRectByScenario({...t,stack:c}))).reduce(((t,i)=>[t[0].concat(i[0]),t[1].concat(i[1])]),[[],[]]),M=P[P.length-1],B=P[0],v=b[b.length-1],E=b[0],[L,H]=u.stackValues(m);if(M){const t=M.axialRect.topWord(L);if(O.push(x.outerFit(L)||o===e.BAR?l({word:L,x:t.x,y:t.y,background:"white"}):""),!v){const t=B.axialRect.bottomWord(s.key);O.push(x.outerFit(s.key)||o===e.BAR?l({word:s.key,x:t.x,y:t.y,background:"white"}):"")}}if(v){const t=v.axialRect.topWord(H);O.push(x.outerFit(H)||o===e.BAR?l({word:H,x:t.x,y:t.y,background:"white"}):"");const i=M?v.axialRect.topWord(s.key):E.axialRect.bottomWord(s.key);O.push(x.outerFit(s.key)||o===e.BAR?l({word:s.key,x:i.x+(o===e.BAR&&M?-n.labelWidth(H)-g.barLabelGap:0),y:i.y+(o===e.COLUMN&&M?n.labelHeight:0),background:"white"}):"")}this.render=k+O}static buildMetaDataPoint(t){const{value:i,x:a,y:s,rectWidth:n,scale:h,axisOffset:r,chartType:l}=t;return new o(a+(l===e.COLUMN?r:0),s+(l===e.BAR?r:0),n,Math.abs(i*h),l===e.COLUMN?i>0?c.TOP:c.BOTTOM:i>0?c.RIGHT:c.LEFT)}static buildMetaDataPoints(t){const{metaDataPoints:i,x:a,y:s,rectWidth:n,scale:h,axisOffset:r=0,primary:l,chartType:c}=t,o=[],d=[];for(let t=0;t<i.length;t++){const{value:u,scenario:g,stackIndex:y}=i[t],x=u>=0?o[o.length-1]:d[d.length-1];(u>=0?o:d).push({value:u+(x?x.value:0),unstackValue:u,scenario:g,axialRect:W.buildMetaDataPoint({value:u,x:c!==e.COLUMN&&x?x.axialRect.topPosition().x:a,y:c!==e.BAR&&x?x.axialRect.topPosition().y:s,rectWidth:n,scale:h,axisOffset:r,chartType:c}),stackIndex:y,primary:l})}return[o,d]}}function m(t,i){const{data:s,width:n=100,height:h}=t;let{scale:r,reScale:l,axisOrigin:c}=i;const o=new y(c.x,c.y,s,r*l);return a({chart:s.map(((t,i)=>new W({x:o.x,y:o.dataPointPositions[i],dataPoint:t,rectWidth:y.primaryBarWidth,scale:r*l,chartType:e.BAR}).render))+o.render(),width:n,height:h??o.chartWidth,viewBoxWidth:n*l,viewBoxHeight:o.chartWidth})}function A(t,i){const{data:s,height:n=100,width:h}=t,{scale:r,reScale:l,axisOrigin:c}=i,o=new x(c.x,c.y,s,r*l);return a({chart:s.map(((t,i)=>new W({x:o.dataPointPositions[i],y:o.y,dataPoint:t,rectWidth:o.columnWidth,scale:r*l,chartType:e.COLUMN}).render))+o.render(),width:h??o.chartWidth,height:n,viewBoxWidth:o.chartWidth,viewBoxHeight:n*l})}class p{static buildLabels(t){const{labels:i,data:a,axis:s,finalScale:h,side:r,leftExtensionOffset:c=0}=t,{scale:o,heights:d,axisOrigin:y}=h,f=[];for(;d.actualHeight<i.length*n.labelHeight;)i.pop();const m=Math.max(...i.map((t=>n.labelWidth(t)))),{left:A,primary:p,right:T}=u.allValues("LEFT"===r?a[0]:a[a.length-1]),C=[];let w=0;"LEFT"===r&&A.length>0?(C.push(...A),w=-x.secondaryColumnWidth):"RIGHT"===r&&T.length>0?(C.push(...T),w=x.secondaryColumnWidth):C.push(...p);let P=C.slice(0,i.length),b=C.slice(0,i.length);for(b=b.map((t=>({...t,value:Math.max(Math.abs(t.value),n.labelHeight/o)*(t.value>0?1:-1)})));d.actualHeight<b.reduce(((t,i)=>t+Math.abs(i.value)*o),0);)b=b.map((t=>({...t,value:Math.max(Math.abs(Math.abs(t.value)-Math.abs(t.value/10)),n.labelHeight/o)*(t.value>0?1:-1)})));const[k,O]=W.buildMetaDataPoints({metaDataPoints:P,x:("LEFT"===r?s.dataPointPositions[0]+m:s.dataPointPositions[s.dataPointPositions.length-1]+c)+w,y:y.y,rectWidth:s.columnWidth,scale:o,chartType:e.COLUMN}),M=[...k,...O],[B,v]=W.buildMetaDataPoints({metaDataPoints:b,x:"LEFT"===r?g.chartPadding+m/2:g.chartPadding+c+s.width+m/2,y:y.y,rectWidth:m,scale:o,chartType:e.COLUMN}),E=[...B,...v],[L,H]=u.stackValues(b),S=(Math.max(0,L-d.maxPositiveValue)+Math.min(0,H-d.minNegativeValue))*o;return E.forEach((t=>{t.axialRect.y=t.axialRect.y+S})),E.forEach(((t,a)=>{const e=M[a].axialRect.centerWord(i[t.stackIndex]),s=e.y-n.actualHeight>t.axialRect.draw().y&&e.y+n.bottomPadding<t.axialRect.draw().y+t.axialRect.draw().height;f.push(l({y:s?e.y:t.axialRect.centerWord(i[t.stackIndex]).y,x:t.axialRect.centerWord(i[t.stackIndex]).x+("LEFT"===r?1:-1)*((m-n.labelWidth([i[t.stackIndex]]))/2),word:i[t.stackIndex]})),s||f.push(function(t={}){const{startPosition:i,endPosition:a}=t;return`<line \n  x1="${i.x}" \n  y1="${i.y}" \n  x2="${a.x}" \n  y2="${a.y}" \n  stroke="black" \n  stroke-width="1"\n  stroke-linecap="round"\n  />`}({startPosition:"LEFT"===r?M[a].axialRect.leftPosition():M[a].axialRect.rightPosition(),endPosition:"LEFT"===r?t.axialRect.rightPosition():t.axialRect.leftPosition()}))})),{sideExtensionOffset:m,renderLabels:f}}static calculateSideExtensionOffset(t,i){for(;i<t.length*n.labelHeight;)t.pop();return Math.max(...t.map((t=>n.labelWidth(t))))}}function T(t,i){const{data:n,height:h=100,width:r}=t,{scale:l,reScale:c,heights:o,axisOrigin:d}=i,u=new x(d.x,d.y,n,l*c,s.STACK),{left:g,right:y}=t;let f=0,m=0,A=[];return["LEFT","RIGHT"].forEach((t=>{if(("LEFT"===t?g:y)&&("LEFT"===t?"LABEL"===g.extension:"LABEL"===y.extension)){const{labels:a}="LEFT"===t?g:y,e=p.buildLabels({labels:a,data:n,axis:u,finalScale:{...i,scale:l*c},side:t,leftExtensionOffset:f});"LEFT"===t?f=e.sideExtensionOffset:m=e.sideExtensionOffset,A.push(e.renderLabels)}})),a({chart:n.map(((t,i)=>new W({x:u.dataPointPositions[i]+f,y:u.y,dataPoint:t,rectWidth:u.columnWidth,scale:l*c,stack:!0,chartType:e.COLUMN}).render))+A+u.render(f),width:r??f+u.chartWidth+m,height:h,viewBoxWidth:f+u.chartWidth+m,viewBoxHeight:h*c})}class C{static DefaultColumn(t,i){const{width:a,data:e}=t;return a?new x(g.chartPadding,0,e,i).chartWidth/a:1}static StackColumn(t,i,a){const{width:e,data:s,left:n,right:h}=t;if(!e)return 1;const r=new x(g.chartPadding,0,s,i);let l=0,c=0;return["LEFT","RIGHT"].forEach((t=>{if(("LEFT"===t?n:h)&&("LEFT"===t?"LABEL"===n.extension:"LABEL"===h.extension)){const{labels:i}="LEFT"===t?n:h,e=p.calculateSideExtensionOffset(i,a);"LEFT"===t?l=e:c=e}})),(l+r.chartWidth+c)/e}static DefaultBar(t,i){const{height:a,data:e}=t;return a?new y(0,g.chartPadding,e,i).chartWidth/a:1}}function w(t){Array.isArray(t)||(t=[t]);let i=[],a=Number.MAX_VALUE;for(let n=0;n<t.length;n++){const{chartType:h,chartVariant:r,data:l,height:c,width:o}=t[n];let d={scale:1,heights:{actualHeight:c}},u=0,y=1;for(;u!=y;){switch(u=y,h){case e.COLUMN:r===s.STACK?(y=C.StackColumn(t[n],d.scale*y,d.heights.actualHeight),d=g.StackColumn(t[n],c*y)):(y=C.DefaultColumn(t[n],d.scale*y),d=g.DefaultColumn(t[n],c*y));break;case e.BAR:y=C.DefaultBar(t[n],d.scale*y),d=g.DefaultBar(t[n],o*y)}console.log("ITERATION",u,y)}console.log("finished"),d.reScale=y,i.push(d),i[n].scale/y<a&&(a=i[n].scale/y)}let n=[];for(let h=0;h<t.length;h++){const r=t[h],{chartType:l,chartVariant:c}=r,o=i[h];switch(l){case e.COLUMN:c===s.STACK?n.push(T(r,{...o,scale:a})):n.push(A(r,{...o,scale:a}));break;case e.BAR:n.push(m(r,{...o,scale:a}))}}return n}})(),StandardCharts=i.default})();